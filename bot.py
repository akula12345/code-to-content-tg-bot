from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import hcode
from typing import List

import asyncio


from bot_config import TOKEN, owner
import db_config
import keyboards

from states import AddNewFilm, DeleteFilm, SendAll, AlbumMiddleware

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—É
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    db_config.get_user(message.from_user.id)
    await message.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç—É –∑ —Ñ—ñ–ª—å–º–∞–º–∏ü™Ñ\n\n–ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –∫–æ–¥ —Ñ—ñ–ª—å–º—É —ñ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é —Ç–æ–±—ñ –Ω–∞–∑–≤—É :)", reply_markup=keyboards.start_kb)

@dp.message_handler(Text(equals=['ü™Ñ–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–ºü™Ñ']))
async def actual_link(message: types.message):
	await start(message)

# –í—Ö—ñ–¥ –¥–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—ñ
@dp.message_handler(commands=['panel'])
async def panel(message: types.Message):
	if message.from_user.id == owner:
		await message.answer('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ü™Ñ', reply_markup=keyboards.panel_kb)

@dp.message_handler(Text(equals=['‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è']))
async def back_n_stop(message: types.message):
	await dp.storage.close()
	await dp.storage.wait_closed()
	await message.answer('–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –¥—ñ—éü™Ñ', reply_markup=keyboards.panel_kb)

@dp.message_handler(Text(equals=['ü´Ç–ö—ñ–ª—å–∫–∏—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ü´Ç']))
async def users_stat(message: types.message):
    if message.from_user.id == owner:
        msg, users = db_config.get_users()
        await message.answer(msg)

@dp.message_handler(Text(equals=['üì©–ó—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—Éüì©']))
async def send_all(message: types.message):
    if message.from_user.id == owner:
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüí¨', reply_markup=keyboards.back_kb)
        await SendAll.msg_text.set()

@dp.message_handler(state=SendAll.msg_text)
async def send_all_message(message: types.Message, state: FSMContext):
    if(message.text == '‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è'):
        await back_n_stop(message)
        return
    
    msg, users = db_config.get_users()

    #–∞–∫—Ç–∏–≤–Ω—ñ/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —é–∑–µ—Ä–∏
    a_users = 0
    n_users = 0

    for u in users:
        try:
            await bot.send_message(u, message.text)
            a_users += 1
        except:
            n_users += 1

    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
    await message.answer(f'–†–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ü™Ñ\n\n–í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {a_users + n_users}\n–ê–∫—Ç–∏–≤–Ω–∏—Ö: {a_users}\n–ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {n_users}', reply_markup=keyboards.panel_kb)


# –ê–î–ú–Ü–ù–°–¨–ö–Ü –ö–û–ú–ê–ù–î–ò
# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—É 
@dp.message_handler(Text(equals=['üé•–î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–ºüé•']))
async def add_code(message: types.message):
	if message.from_user.id == owner:
		await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—Éü™Ñ', reply_markup=keyboards.back_kb)
		await AddNewFilm.film_name.set()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—É
@dp.message_handler(state=AddNewFilm.film_name)
async def send_name(message: types.Message, state: FSMContext):
    if(message.text == '‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è'):
        await back_n_stop(message)
        return

    async with state.proxy() as data:
        data['film_name'] = message.text
    
    await message.answer('–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—Éü™Ñ', reply_markup=keyboards.content_type_kb)
    await AddNewFilm.next()

#######################

@dp.message_handler(state=AddNewFilm.content_type)
async def send_content_type(message: types.Message, state: FSMContext):
    if(message.text == '‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è'):
        await back_n_stop(message)
        return

    async with state.proxy() as data:
        data['content_type'] = message.text
    if message.text == 'üì∑–§–æ—Ç–æüì∑':
        await AddNewFilm.next()
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æü™Ñ')
    elif message.text == 'üñº–ê–ª—å–±–æ–ºüñº':
        await AddNewFilm.album.set()
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–ª—å–±–æ–ºü™Ñ')
    elif message.text == 'üéû–ì—ñ—Ñüéû':
        await AddNewFilm.gif.set()
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥—ñ—Ñü™Ñ')
    elif message.text == 'üìπ–í—ñ–¥–µ–æüìπ':
        await AddNewFilm.video.set()
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æü™Ñ')
    else:
        await message.answer('–£–ø—Å... –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ :(')
        await dp.storage.close()
        await dp.storage.wait_closed()


# 


@dp.message_handler(content_types=["photo"], state=AddNewFilm.photo)
async def send_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo_id'] = message.photo[-1].file_id

    result = db_config.add_new_film(data['film_name'], data['content_type'], data['photo_id'])

    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
	
    if(result == 1):
        msg = f'–§—ñ–ª—å–º –±—É–ª–æ –¥–æ–¥–∞–Ω–æü™Ñ'
        await message.answer(msg, parse_mode='HTML', reply_markup=keyboards.panel_kb)
    else:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ :(\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=keyboards.panel_kb)

# 


# 
@dp.message_handler(is_media_group=True, content_types=types.ContentType.ANY, state=AddNewFilm.album)
async def send_album(message: types.Message, album: List[types.Message], state: FSMContext):
    media_group = types.MediaGroup()
    media_group_data = []

    for obj in album:
        if obj.photo:
            file_id = obj.photo[-1].file_id
        else:
            file_id = obj[obj.content_type].file_id

        try:
            media_group_data.append(file_id)
        except ValueError:
            return await message.answer("This type of album is not supported by aiogram.")

    async with state.proxy() as data:
        data['album'] = media_group_data

        album_media_ids = ''
    for i in media_group_data:
        album_media_ids += i + ', '

    result = db_config.add_new_film(data['film_name'], data['content_type'], album_media_ids)

    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
	
    if(result == 1):
        msg = f'–§—ñ–ª—å–º –±—É–ª–æ –¥–æ–¥–∞–Ω–æü™Ñ'
        await message.answer(msg, parse_mode='HTML', reply_markup=keyboards.panel_kb)
    else:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ :(\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=keyboards.panel_kb)

# 

# 


@dp.message_handler(content_types=["animation"], state=AddNewFilm.gif)
async def send_animation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gif_id'] = message.animation.file_id
    
    result = db_config.add_new_film(data['film_name'], data['content_type'], data['gif_id'])

    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
	
    if(result == 1):
        msg = f'–§—ñ–ª—å–º –±—É–ª–æ –¥–æ–¥–∞–Ω–æü™Ñ'
        await message.answer(msg, parse_mode='HTML', reply_markup=keyboards.panel_kb)
    else:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ :(\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=keyboards.panel_kb)

# 



# 


@dp.message_handler(content_types=["video"], state=AddNewFilm.video)
async def send_video(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['video_id'] = message.video.file_id
    
    result = db_config.add_new_film(data['film_name'], data['content_type'], data['video_id'])

    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
	
    if(result == 1):
        msg = f'–§—ñ–ª—å–º –±—É–ª–æ –¥–æ–¥–∞–Ω–æü™Ñ'
        await message.answer(msg, parse_mode='HTML', reply_markup=keyboards.panel_kb)
    else:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ :(\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=keyboards.panel_kb)
	

# 

# –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É
@dp.message_handler(Text(equals=['‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å–º‚ùå']))
async def delete_code(message: types.message):
	await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—èü™Ñ', reply_markup=keyboards.back_kb)
	await DeleteFilm.film_code.set()

#
@dp.message_handler(state=DeleteFilm.film_code)
async def delete_code_by_name(message: types.Message, state: FSMContext):
    if(message.text == '‚óÄÔ∏è–ú–µ–Ω—é‚óÄÔ∏è'):
        await back_n_stop(message)
        return
	
    result = db_config.delete_film(message.text)

    await state.finish()
    await dp.storage.close()
    await dp.storage.wait_closed()
	
    if(result == 1):
        msg = f'–§—ñ–ª—å–º –±—É–ª–æ –¥–æ–¥–∞–Ω–æü™Ñ'
        await message.answer(msg, parse_mode='HTML', reply_markup=keyboards.panel_kb)
    else:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ :(\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!", reply_markup=keyboards.panel_kb)
	
# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ –∫–æ–¥–∞—Ö
@dp.message_handler(Text(equals=['üìΩ–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ —Ñ—ñ–ª—å–º–∞—ÖüìΩ']))
async def films_info(message: types.message):
    films = db_config.get_films()
    msg = f'–í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {len(films)}\n\n5 –ø–æ—Å–ª–µ–¥–∏—Ö –∫–æ–¥–æ–≤:\n\n {films[-5:]}'

    await message.answer(msg)


# –í–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—É –∑–∞ –∫–æ–¥–æ–º
@dp.message_handler()
async def echo(message: types.Message):

	film = db_config.get_film_by_code(message.text)
	print(film)

	if film == 0:
		await message.answer('–£–ø—Å... –°—Ö–æ–∂–µ —Ç–∞–∫–æ–≥–æ –∫–æ–¥—É –Ω–µ–º–∞—î.')
		return

	if film[3] == 'üì∑–§–æ—Ç–æüì∑':
		await message.answer_photo(film[4], caption=film[1])
	elif film[3] == 'üñº–ê–ª—å–±–æ–ºüñº':
		media_group = film[4].split(', ')
		media_group_send = types.MediaGroup()
		try:
			for i in media_group:
				if i == "":
					pass
				else:
					media_group_send.attach({"media": i, "type": "photo"})
			await message.answer_media_group(media_group_send)
			await message.answer(film[1])
		except ValueError:
			return await message.answer("This type of album is not supported by aiogram.")
	elif film[3] == 'üéû–ì–∏—Ñüéû':
		await message.answer_animation(film[4], caption=film[1])
	elif film[3] == 'üìπ–í–∏–¥–µ–æüìπ':
		await message.answer_video(film[4], caption=film[1])



# ---------------------------
if __name__ == '__main__':
    db_config.database_setup()
    dp.middleware.setup(AlbumMiddleware())
    executor.start_polling(dp)